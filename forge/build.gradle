plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}

architectury {
    platformSetupLoomIde()
    forge()
}


loom {
    //accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        // convertAccessWideners = true
        //extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "EmoteTweaks.mixins.json"
    }

}

configurations {
    dev
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

artifacts {
    dev(jar)
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modApi "de.maxhenkel.voicechat:voicechat-api:${rootProject.voicechat_api}"
    modApi "maven.modrinth:simple-voice-chat:forge-${rootProject.voicechat}"

    modApi "dev.kosmx.player-anim:player-animation-lib-forge:${rootProject.player_animation_lib}"
    modApi "io.github.kosmx.emotes:emotesMain:${rootProject.emotecraft}"
    modApi "maven.modrinth:emotecraft:${rootProject.emotecraft}+${rootProject.minecraft_version}-forge"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"

    from rootProject.file("LICENSE.md")
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

unifiedPublishing {
    project {
        displayName = "[Forge $rootProject.minecraft_version] v$project.version"
        releaseType = "release"
        gameVersions = ["1.20","1.20.1"]
        gameLoaders = ["forge"]

        mainPublication remapJar

        relations {
            depends {
                curseforge = "emotecraft-forge"
                modrinth = "emotecraft"
            }
            depends {
                curseforge = modrinth = "simple-voice-chat"
            }
            depends {
                curseforge = modrinth = "architectury-api"
            }
        }

        if (project.hasProperty("curse_api_key") || System.getenv("curse_api_key") != null) {
            curseforge {
                token = project.hasProperty("curse_api_key") ? project.property("curse_api_key") : System.getenv("curse_api_key")
                id = project.curseforge_id
                gameVersions.addAll "Java 17"
            }
        }

        if (project.hasProperty("modrinth_key") || System.getenv("modrinth_key") != null) {
            modrinth {
                token = project.hasProperty("modrinth_key") ? project.property("modrinth_key") : System.getenv("modrinth_key")
                id = project.modrinth_id
                version = "$project.version+$project.name"
            }
        }
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

rootProject.tasks.getByName("modPublish").dependsOn tasks.getByName("publishUnified")