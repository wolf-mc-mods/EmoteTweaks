plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.1-SNAPSHOT" apply false
    id "me.shedaniel.unified-publishing" version "0.1.+"

    id "com.github.breadmoirai.github-release" version "2.4.1"
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.officialMojangMappings()
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.16.5+build.10:v2"
    }
}

allprojects {
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    def runNumber = (System.getenv("GITHUB_RUN_NUMBER") == null ? "9999" : System.getenv('GITHUB_RUN_NUMBER'))

    archivesBaseName = rootProject.archives_base_name
    version = rootProject.mod_version + "." + runNumber
    group = rootProject.maven_group


    repositories {
        // Add repositories to retrieve artifacts from in here.
        // You should only use this when depending on other mods because
        // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
        // See https://docs.gradle.org/current/userguide/declaring_repositories.html
        // for more information about repositories.
        maven {
            url = "https://maven.parchmentmc.org"
        }
        maven {
            url = "https://maven.kosmx.dev"
        }
        maven {
            url = "https://maven.maxhenkel.de/repository/public"
        }
        maven {
            url = "https://api.modrinth.com/maven"
        }
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
        // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
        // We'll use that if it's available, but otherwise we'll use the older option.
        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release = targetVersion
        }
    }

    java {
        withSourcesJar()
    }
}

task modPublish
